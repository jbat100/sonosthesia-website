.container

    h1 Standards for Control Data

    p A central concept of Sonosthesia cross-modal control flow between components. Components can react to control input and produce control output. Creating a reference for domain specific control data to allow compatibility between different components is an important step, depending on the type of component this control data will take different forms. Digital art often uses the open-ended OSC protocol, which is very flexible but lack the kind of standardised semantics enforced by older protocols such as MIDI. OSC also lacks data structuring (maps, arrays etc...) and does not allow bi-directional messaging patterns, both of which Sonosthesia as shown a need for.

    p When it comes to sound and music, the persistence of MIDI for sound control despite its limitations (7 bit depth for channel, pitch, small number of channels, limited control and after-touch etc...) shows the power of standardization. Although OSC has found a place in music its role is often as a low-level controller (frequencies, amplitudes, filter parameters...). It hasn't replaced MIDI, it has complemented it. The factory messaging pattern described above is a perfect fit for emulating and augmenting MIDI capabilities. MIDI channels map to the channel property of factory messages, while pitch and volume can be given as parameters, a MIDI note on message would translate to

    p JSON has been chosen for data representation as it combines flexibility and structure with an explicit, self-documenting human readable format. It is also transport-independent and its capacity for handling a wide variety of messaging patterns is well tested. There might be some over-head in terms of size but with modern hardware, the effect will be insignificant unless unreasonable message densities are used.


    h2 Creating Objects


    p An object is created on a given channel, with a given (machine-generated) unique identifier. Initial values can be given for its parameters and properties.

    :markdown
        ```javascript
            {
                "type": "create",
                "channel": "channel1",
                "identifier": "123e4567-e89b-12d3-a456-426655440000",
                "parameters": {
                    "parameter1": 0.3245543,
                    "parameter2": 0.5433435
                },
                "properties": {
                    "property1": "something"
                }
            }
        ```

    h2 Destroying Objects

    p An object is can be destroyed using its unique identifier. Given each unique object identifier is tied to the creator channel, it would be redundant information. Final property and parameter values can be given to guide it's destruction process (fade outs, explosions, etc...).

    :markdown
        ```javascript
            {
                "type": "destroy",
                "object": "123e4567-e89b-12d3-a456-426655440000",
                "parameters": {
                    "parameter1": 0.3245543,
                    "parameter2": 0.5433435
                }
            }
        ```

    h2 Modifying Object Parameters

    p Once an object is created, any its parameters can be changed by using its unique object identifier. Again the channel is redundant information.

    :markdown
        ```javascript
            {
                "type": "parameter",
                "object": "123e4567-e89b-12d3-a456-426655440000",
                "parameters": {
                    "parameter1": 0.3039989,
                    "parameter2": 0.5386749
                }
            }
        ```

    p A parameter message can be applied to multiple objects by specifying an array of unique object identifiers.

    :markdown
        ```javascript
            {
                "type": "parameter",
                "object": ["123e4567-e89b-12d3-a456-426655440000", "42665544-e89b-12d3-a456-123e45670000"],
                "parameters": {
                    "parameter2": 0.3039989
                }
            }
        ```

    p Multi-dimensional parameters are allowed but think carefully about whether you need them as they make mappings more complex. Just pass an array of floats instead of a float.

    :markdown
        ```javascript
            {
                "type": "parameter",
                "object": "123e4567-e89b-12d3-a456-426655440000",
                "parameters": {
                    "parameter2": [0.3039989, 0.3425266]
                }
            }
        ```

    p Property messages are very similar

    :markdown
        ```javascript
            {
                "type": "property",
                "object": "123e4567-e89b-12d3-a456-426655440000",
                "properties": {
                    "property1": "something"
                }
            }
        ```

    h2 Modifying Channel Parameters

    p As stated in the terminology, channels are in fact static objects. They just exist, they are not created or destroyed. Being objects they have the same parameter modification system, only the message contains a #[b channel] field instead of an #[b object] field to identify the target. Although they can be used as object factories, channels can also be used as static control mechanisms (controlling the tempo of a musical rendering for example). If the channel has created objects, the parameter or property changes will be propagated to them.

    :markdown
        ```javascript
        {
            "type": "parameter",
            "channel": "channel1",
            "parameters": {
                "parameter1": 0.32352,
                "parameter2": 0.87467
            }
        }
        ```

    h2 Controlling Sound Synthesis

    p Concrete examples of how these concepts can be applied are useful. For sound synthesis, we can use the patterns described above to elegantly emulate and augment MIDI capabilities. A note on message translate to

    :markdown
        ```javascript
            {
                "type": "create",
                "channel": "pad1",
                "identifier": "123e4567-e89b-12d3-a456-426655440000",
                "parameters": {
                    "pitch": 440.0,
                    "volume": 0.5433435,
                    "shine": 0.232838,
                    "attack": 0.642466
                }
            }
        ```

    p There are obvious advantages over MIDI here. Channels can have meaningful names and their number is not limited by the standard. Volume has float precision, pitch is a float which allows it to address non-western or micro-tonal pitching or raw frequencies, and additional parameters can be added to alter the synthesiser parameters for each individual note. MIDI control messages fit just as nicely.

    :markdown
        ```javascript
        {
            "type": "parameter",
            "object": "123e4567-e89b-12d3-a456-426655440000",
            "parameters": {
                "pitch": 440.0
            }
        }
        ```

    p A MIDI pitch bend, for example, can be obtained by sending control messages with a changing pitch parameter, or a bend parameter to specify a pitch offset. A MIDI note off is an object destruction, for example

    :markdown
        ```javascript

        // stop for a single note
        {
            "type": "destroy",
            "object": "123e4567-e89b-12d3-a456-426655440000",
            "parameters": {
                "release": 0.342342
            }
        }
        ```

    p In comparison to MIDI, the additional flexibility in defining a synthesizers attributes and control mechanism comes at a cost of complexity for the synthesizer itself. But it is a price worth paying, the growing capability of synthesisers to explore exotic soundscapes make the shortcomings of MIDI ever more apparent. It is up to the synthesizers to document the parameters which they support (as described in the previous section), and up to the controller to adapt.

    h2 Describing Sound

    p This messaging pattern can be used for both controlling and describing things. A channel can be used to transport sound analysis parameters for a given track in a DAW (or any audio application).

    :markdown
        ```javascript
        {
            "type": "parameter",
            "channel": "bass",
            "parameters": {
                "pitch": 440.0,
                "spectral-bins": [0.265434, 0.634633, 0.4534345]
            }
        }
        ```

    h2 Describing Virtual Object Manipulation

    p Virtual object manipulation is of central importance to the Sonosthesia project, it is a complex emerging subject. There is little pre-existing work in terms of protocols describing them. The same messaging pattern is applied here also, for describing contacts. The channel represents an object in the virtual world (sphere, teapot etc...). A contact is created when a foreign objects collides with the channel.

    :markdown
        ```javascript
        {
            "type": "create",
            "channel": "sphere1",
            "identifier": "123e4567-e89b-12d3-a456-426655440000"
            "parameters": {
                "incidence": 0.1765,
                "velocity": 10.7534,
                "hardness": 0.3342
                "wood": 0.2325,
                "metal": 0.4592
            }
        }
        ```

    p There are two required parameters which are the #[b incidence] (see #[a(href="https://en.wikipedia.org/wiki/Angle_of_incidence_(optics)") angle of incidence]) and the velocity. Note that vectors are abstracted away, incidence and velocity should be enough dynamic information. This means that the same message format can be used for both 2D and 3D environments, there is no dimensionality change.

    p Other parameters are defined by the surface properties of the colliding objects at the point of collision. Although the value of these surface properties can be encoded in the color components or UV coordinates, they should really be translated into behavioural meaning by the emitting component which will help the mappings to other domains. In other words, parameter names such as #[i wood], #[i metal] and #[i hardness] should be preferred to #[i red], #[u] or #[x]. Once the contact is initiated, it can persist if the colliders stay within a given range of each other, in order to emulate actions like scratching, scraping, rubbing. During that time the parameters can be constantly updated by factory control messages.

    :markdown
        ```javascript
        {
            "type": "parameter",
            "object": "123e4567-e89b-12d3-a456-426655440000"
            "parameters": {
                "incidence": 0.4982,
                "velocity": 3.7534,
                "hardness": 0.6732
                "wood": 0.5312,
                "metal": 0.4232
            }
        }
        ```

    p When the colliders overrun the set contact distance threshold, the contact is destroyed following the factory messaging pattern (note the negative velocity implying that the colliders are moving away from each other).

    :markdown
        ```javascript
        {
            "type": "destroy",
            "object": "123e4567-e89b-12d3-a456-426655440000"
            "parameters": {
                "incidence": 0.4982,
                "velocity": -3.7534
            }
        }
        ```

    h2 Declaring Channels

    p Components can declare the channels that they support, for each declaring valid properties and parameters.

    :markdown
        ```javascript
            // a typical DAW synth channel declaration
            {
                "type": "channel",
                "identifier": "pad1"
                "domain": "synth",
                "parameters": ["pitch", "velocity", "bend", "shine"]
            }

            // a typical DAW sound analysis channel declaration
            {
                "type": "channel",
                "identifier": "pad1"
                "domain": "sound",
                "parameters": ["pitch", "rms", "crest", "shine"]
            }

            // a typical game engine contact channel declaration
            {
                "type": "channel",
                "identifier": "sphere1"
                "domain": "contact",
                "parameters": ["incidence", "velocity", "wood", "metal", "hardness"]
            }
        ```